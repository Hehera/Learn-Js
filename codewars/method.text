===
ParseInt() - з рядка в число,приймає 2 аргументи : рядок, який ви бажаєте перетворити, і опціональний параметр "radix" (основа системи числення).
const str = "42";
const number = parseInt(str);
console.log(number); // Виведе 42 (ціле число)

Ex2 Якщо ви вказуєте другий параметр "radix" (основа системи числення), ви можете визначити, у якій системі числення знаходиться введений рядок. 

const binaryStr = "1010";
const decimalNumber = parseInt(binaryStr, 2); // Вказуємо основу системи числення 2 (двійкова)
console.log(decimalNumber); // Виведе 10 (десяткове число)
Ex3
var numberAsString = "42";
var number = parseInt(numberAsString, 10); // Преобразует "42" в число 42 (десятичная система счисления).
Указание основания системы счисления (в данном случае 10) является хорошей практикой, чтобы избежать недоразумений и неправильных интерпретаций
===
Math.sqrt() - метод використовується для обчислення квадратного кореня числа.

Цілий квадратний корінь - це корінь з числа, який є цілим числом. Наприклад, квадратний корінь з числа 9 дорівнює 3, 
і 3 - це ціле число. Тобто, якщо корінь числа є цілим числом, то це цілий квадратний корінь.

Нецілий квадратний корінь - це корінь з числа, який не є цілим числом. Наприклад, квадратний корінь з числа 2 є приблизно 1.41421, 
і це не є цілим числом. Тобто, якщо корінь числа не є цілим числом, то це нецілий квадратний корінь.

const number = 9;
const squareRoot = Math.sqrt(number);
console.log(squareRoot); // Виведе 3, оскільки квадратний корінь з 9 дорівнює 3.

===
isInteger() - перевіряє, чи значення є цілим числом.
 if (Number.isInteger(squareRoot)) {  // Перевіряємо, чи квадратний корінь є цілим числом
      result.push(squareRoot);  // Якщо так, додаємо корінь до результату
    } else {
      result.push(number * number);  // Якщо корінь не є цілим числом, додаємо квадрат числа до результату
    }
===
slice() - цей метод не змінює вихідний масив, а повертає новий масив, включаючи елементи, вибрані на основі індексів,
 вказаних у параметрах методу.

 array.slice(startIndex, endIndex)

 const fruits = ["яблоко", "банан", "апельсин", "груша", "вишня"];

Вибираємо елементи з індексами 1 (включно) до 3 (не включаючи)
const selectedFruits = fruits.slice(1, 3);
console.log(selectedFruits);  ["банан", "апельсин"]

Якщо endIndex не вказано, то вибірка триває до кінця масиву
const restOfFruits = fruits.slice(2);
console.log(restOfFruits);  ["апельсин", "груша", "вишня"]

Слід зазначити, що метод slice() не змінює вихідний масив. Він завжди повертає новий масив, який містить вибрані елементи. 
Якщо ви хочете змінити вихідний масив, ви повинні використовувати такі методи, як splice().

Метод slice корисний, коли вам потрібно отримати підмножину елементів масиву, не впливаючи на оригінальний масив.
===

charAt() - це метод, який використовується для отримання символу (знака) в рядку за заданим індексом.
Цей метод доступний для об’єктів JavaScript типу String. Він приймає один параметр - символ індексу, який ви хочете витягти з рядка.

string.charAt(index)

const myString = "Hello, World";

const firstChar = myString.charAt(0); Отримуємо перший символ (H)
const fifthChar = myString.charAt(4); Отримуємо п'ятий символ (o)

console.log(firstChar); // Висновок: "H"
console.log(fifthChar); // Висновок: "o"

===

String.prototype - це об'єкт, який містить всі методи, які доступні для об'єктів типу String.
.camelCase() - це ім'я нового методу, який ми додаємо до об'єкта String.
===

Метод padStart(2, "0") використовується для форматування числа (місяця) як рядка, забезпечуючи, що він завжди матиме дві цифри.
 У вас вказано 2 як перший аргумент, що означає, що ви хочете отримати рядок довжиною не менше 2 символів. Якщо число місяця має
лише одну цифру, то метод padStart додасть 0 до початку числа, зробивши його двоцифровим.
===
Метод Math.pow()  використовується для піднесення числа до певного ступеня (піднесення до степеня).
Він приймає два аргументи: основне число (число, яке підносимо до степеня) і ступінь (ступінь, до якого піднесення виконується). 
// Піднесення числа 2 до ступеня 3 (2^3)
let result = Math.pow(2, 3); // Результат буде 8
===
Math.abs -  приймає число як аргумент і повертає його модуль (абсолютне значення), 
тобто відстань числа від нуля без урахування його знаку.

Ех.
const number = -5;
const absoluteValue = Math.abs(number);
console.log(absoluteValue); // Виведе 5, оскільки модуль - це відстань від -5 до 0 без урахування знаку
Ех.2
const x1 = -3;
const x2 = 5;
const distance = Math.abs(x2 - x1);
console.log(distance); // Виведе 8, відстань між -3 і 5 на вісі
===
 Set
Set() - це конструктор для створення об'єктів Set у JavaScript. Об'єкт Set являє собою колекцію унікальних значень, 
що означає, що кожне значення Set може з'являтися тільки один раз. Set не підтримує дублікати, і всі його елементи є унікальними.

Ex.
var mySet = new Set();

mySet.add(1);
mySet.add(2);
mySet.add(3);
mySet.add(2); // Дубликати не добавятся

console.log(mySet); // Set { 1, 2, 3 }

===
size
size - це властивість об'єкта Set у JavaScript, яка є кількістю унікальних елементів (значень) в об'єкті Set.
 Воно не є методом, а саме властивістю і доступне для читання.
===
String() - це конструктор рядків у JavaScript, який дозволяє створювати нові рядкові об'єкти. 
Він може бути використаний для перетворення інших типів даних у рядки. Коли String використовується як функція (конструктор)
він створює новий об'єкт рядкового типу.

Ех.
var str1 = String("Пример строки"); Создание строки из строки.
var num = 42;
var str2 = String(num); Преобразование числа в строку.
var bool = true;
var str3 = String(bool); Преобразование булевого значения в строку.

console.log(str1); // "Пример строки"
console.log(str2); // "42"
console.log(str3); // "true"
===
filter використовується для фільтрації елементів масиву(кожного елемента) на основі заданої умови і створення нового масиву,
який містить елементи, які задовольняють цю умову.(true/false)

Синтаксис функції filter в JavaScript виглядає так:

let newArray = array.filter(callback(element[, index[, array]])[, thisArg])

callback: Це функція з умовою фільтрації, яка приймає три аргументи:

element: Поточний елемент масиву.
index (необов'язково): Індекс поточного елемента в масиві.
array (необов'язково): Сам масив, який обробляється.
thisArg (необов'язково): Об'єкт, який буде використовуватися як this в callback-функції.

filter повертає новий масив, який містить всі елементи початкового масиву, для яких функція callback повернула true.

Ось приклад використання:

// Створення функції, яка перевіряє, чи є число парним
function isEven(number) {
  return number % 2 === 0;
}

// Створення масиву чисел
let numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9];

// Використання методу filter для фільтрації парних чисел
let evenNumbers = numbers.filter(isEven);

console.log(evenNumbers); // Результат: [2, 4, 6, 8]

декілька прикладів використання методу filter
Ex 2
let words = ["apple", "banana", "cherry", "date", "elderberry", "fig"];

let longWords = words.filter(word => word.length > 5);




console.log(longWords); // Результат: ["banana", "cherry", "elderberry"]

 Фільтрація чисел менше або рівних певному значенню

 Ex 3 

 let numbers = [10, 25, 5, 40, 8, 15];

let lessThanTwenty = numbers.filter(number => number <= 20);

console.log(lessThanTwenty); // Результат: [10, 5, 8, 15]

Ex 4 

Фільтрація об'єктів за умовою

let products = [
{ name: "Laptop", price: 1000 },
{ name: "Phone", price: 500 },
{ name: "Tablet", price: 300 },
{ name: "Monitor", price: 200 },
];

let affordableProducts = products.filter(product => product.price <= 500);

console.log(affordableProducts);
// Результат:
// [
//   { name: "Phone", price: 500 },
//   { name: "Tablet", price: 300 },
//   { name: "Monitor", price: 200 }
// ]

Ex 5
   
let a = [-1, -4, 21, 3];
let b = a.reduce((accum, item) => {
    // accum = accum + item;//99 сума елементів !!!

  if (item > accum) { найбільше значення в масиві !!!
    accum = item;
  }
  return accum;
}, 0 /**пишемо ноль тому що з від'ємного значення починається масив і  він попаде в результат ,а потім вже почне діяти умова */);
console.log(b);

reduce використовують щоб декілька елементів привести до одного  значення
====
Метод indexOf возвращает индекс первого вхождения элемента в массиве, если элемент не найден, он возвращает -1.
====

